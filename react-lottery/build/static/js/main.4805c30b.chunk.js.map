{"version":3,"sources":["web3.js","lottery.js","App.js","registerServiceWorker.js","index.js"],"names":["window","ethereum","enable","currProvider","web3","currentProvider","Web3","eth","Contract","App","state","manager","players","balance","value","message","onSubmit","event","a","preventDefault","getAccounts","accounts","setState","lottery","methods","enter","send","from","utils","toWei","onClick","pickWinner","call","getPlayers","getBalance","options","address","this","length","fromWei","onChange","target","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4805c30b.chunk.js","sourcesContent":["import Web3 from 'web3';\n\nwindow.ethereum.enable();\n\nconst currProvider = window.web3.currentProvider\nconst web3 = new Web3(currProvider);\n\nexport default web3;","import web3 from './web3';\n\nconst address = '0x0713D4415E278Bb48425220EB684835FBc63CdFf';\n// copy of contract instance on blockchain, copied from CL\nconst abi = [{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}];\n\n// export copy of contract\nexport default new web3.eth.Contract(abi, address);","import React, { Component } from 'react';\nimport './App.css';\nimport web3 from './web3';\nimport lottery from './lottery';\n\nclass App extends Component {\n    state = {\n        manager: '',\n        players: [],\n        balance: '',\n        value: '',\n        message: ''\n    };\n\n    async componentDidMount() {\n        const manager = await lottery.methods.manager().call();\n        const players = await lottery.methods.getPlayers().call();\n        const balance = await web3.eth.getBalance(lottery.options.address);\n\n        this.setState({ manager, players, balance });\n    }\n\n    onSubmit = async (event) => {\n        event.preventDefault();\n\n        const accounts = await web3.eth.getAccounts();\n\n        this.setState({ message: 'Waiting on transaction success...' });\n\n        // enter player into lottery contract,\n        // takes 15-30 secs\n        await lottery.methods.enter().send({\n            from: accounts[0],\n            value: web3.utils.toWei(this.state.value, 'ether')\n        });\n\n        this.setState({ message: 'You have been entered!' });\n    };\n\n    // pick a lottery winner\n    onClick = async () => {\n        const accounts = await web3.eth.getAccounts();\n\n        this.setState({ message: 'Waiting on transaction success...' });\n\n        await lottery.methods.pickWinner().send({\n            from: accounts[0]\n        });\n\n        this.setState({ message: 'A winner has been picked!' });\n    };\n\n    render() {\n        return (\n            <div>\n                <h2>Lottery Contract</h2>\n                <p>\n                    This contract is managed by { this.state.manager }.\n                    There are currently { this.state.players.length } people entered, \n                    competing to win { web3.utils.fromWei(this.state.balance, 'ether') } ether!\n                </p>\n\n                <hr />\n\n                <form onSubmit={this.onSubmit}>\n                    <h4>Want to try your luck?</h4>\n                    <div>\n                        <label>Amount of ether to enter</label>\n                        <input \n                            value={this.state.value}\n                            onChange={event => this.setState({ value: event.target.value })}\n                        />\n                    </div>\n                    <button>Enter</button>\n                </form>\n\n                <hr />\n\n                <h4>Ready to pick a winner?</h4>\n                <button onClick={this.onClick}>Pick a winner!</button>\n\n                <hr />\n\n                <h1>{ this.state.message }</h1>\n            </div>\n        );\n  }\n}\n\nexport default App;\n\n// const result = await new web3.eth.Contract(JSON.parse(interface))\n//      .deploy({data: '0x' + bytecode }) // add 0x bytecode\n//      .send({from: accounts[0]}); // remove 'gas'","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}